====================================================================================
P1-T1-b: AggieFit team has dumped some dummy data into a collection in a MongoDB database. Additionally, they have provided you with more fitness data under eCampus -> Content -> Project 1 -> FitnessData. The data is in a file “dummy-fitness.json”. It contains the fitness data in JSON format. Updates to employees’ personal data and new tags for users come in a JSON formatted file. They provide a sample update file for a dummy employee in user1001-new.json.
They want you to run queries ordered as follows:
submit “… a file containing your queries for WQ1, WQ2, RQ1, RQ2, RQ3, and RQ4. If you use a client library (e.g., python), you can submit the source code in a single file (e.g., queries.py) along with instructions on how to run the code.”

fitness_922009787

——————
WQ1. Add the data in dummy-fitness.json to the MongoDB database

db.fitness_922009787.find().pretty()
db.fitness_922009787.find().pretty()

fitness_922009787.fitness_922009787.find().pretty()
db.fitness_922009787.insertMany()

$ mongoimport --host 34.233.78.56 --jsonArray --collection fitness_922009787 --file dummy-fitness.json

——————
WQ2. Update the database with data from user1001-new.csv.

ORIGINAL
{"activityDuration": [20, 45, 35, 40], "age": 30, "goal": {"activityGoal": "75min", "stepGoal": 8000, "weekGoal": 3}, "stepCount": [2034, 5432, 3056, 4302], "uid": 1001 }

db.fitness_922009787.find({"uid":1001}).pretty()
db.fitness_922009787.update({Name: “Alice”}, {Name: “Alice”, Employer: … })
db.fitness_922009787.update({"uid": 1001}, {"uid": 1001, "height": "5ft10in", "weight": "180lbs", "tags": ["ambitious"]})

> db.fitness_922009787.update({"uid": 1001}, {$set: {"uid": 1001, "height": "5ft10in", "weight": "180lbs", "tags": ["ambitious"]}})

——————
RQ1. Count the number of employees whose data is in the AggieFit database.

db.fitness_922009787.find().count()
db.fitness_922009787.distinct("uid").length

> db.fitness_922009787.distinct("uid").length

——————
RQ2. Retrieve employees who have been tagged as “active”.

db.bios.find( { contribs: "UNIX" } )
db.fitness_922009787.find( { "tags":  "active" } )

db.fitness_922009787.find( { "tags":  "active" } ).pretty()

> db.fitness_922009787.find( { "tags":  "active" } )

——————
RQ3. Retrieve employees that have a goal activity duration greater than 60 minutes.

TESTING
db.fitness_922009787.find({"uid": 0})
db.fitness_922009787.insert({"uid": 0, "goal": {"activityGoal": "9",} })
db.fitness_922009787.update({"uid": 0}, {"uid": 0, "goal": {"activityGoal": "9",}})
{ "uid": 00, "goal": {"activityGoal": "9",}}
db.fitness_922009787.remove({"uid": 0})

"goal": { "activityGoal": "45min" }

db.profiledb.find({"Address.State":"MA"}).pretty()
db.students.find( { score: { $gt: 0, $lt: 2 } } )
1,8,9

db.fitness_922009787.find({"goal.activityGoal": { $gt: "60", $lt: ":" } }, { "uid": 1} )

> db.fitness_922009787.find({"goal.activityGoal": { $gt: "60", $lt: ":" } }).pretty()

db.fitness_922009787.find({
"goal.activityGoal":
    { $gt: "60", $lt: ":", $nin: ["60min", "7", "8", "9", "7min", "8min", "9min" ]
}
}).pretty()

db.fitness_922009787.find({ "goal.activityGoal": { $gt: "60", $lt: ":", $nin: ["60min", "7", "8", "9", "7min", "8min", "9min" ]} }, { "uid": 1})
db.fitness_922009787.find({ "goal.activityGoal": { $gt: "60", $lt: ":", $nin: ["60min", "7", "8", "9", "7min", "8min", "9min" ]} }).pretty()
> db.fitness_922009787.find({ "goal.activityGoal": { $gt: "60", $lt: ":", $nin: ["60min", "7", "8", "9", "7min", "8min", "9min" ]} })

——————
RQ4. Aggregate the total activity duration for each employee. If the employee does not have activity duration in their data, you can report their total activity duration as 0.

1003 lacks activity duration array
e.g.: > "activityDuration": [72, 75, 78, 45, 79, 86]

db.fitness_922009787.aggregate( [
    { $match: "activityDuration" }
    { $group: { _uid: "$uid", aggregate_activity_duration: { $sum: "$activityDuration" } } }
] )

db.students.aggregate([
   {
     $project: {
       quizTotal: { $sum: "$quizzes"},
       labTotal: { $sum: "$labs" },
       examTotal: { $sum: [ "$final", "$midterm" ] }
     }
   }
])

db.fitness_922009787.aggregate([ {
    $project: { _uid: "$uid", aggregate_activity_duration: { $sum: "$activityDuration"} }}
])

====================================================================================