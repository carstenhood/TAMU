Carsten Hood
CSCE 221
HW 7

—————————————————————————
1. Suppose we are given two n-element sorted sequences A and B that should be viewed as sets, i.e., A and B may contain duplicate entries. Describe an O(n) time method for computing a sequence representing the set (A union B). You must describe your algorithm, provide an informal argument as to its correctness, and analyze its running time. (30 points)

To do this in O(n) keep track of 2 iterators, starting at the beginnings of A and B. Access the elements corresponding to the iterators; if one is less than the other, increment the corresponding iterator of the lesser value. If the elements are equal, add the element to the union set and increase both iterators.

Algorithm union (sequence A, sequence B)
	sequence Union;
	iterator a-iter = beginning of A;
	iterator b-iter = beginning of B;
	while a-iter and b-iter have not reached the ends of their sequences
		if (a-iter.elem > b-iter.elem) then
			increment b
		else if (a-iter.elem < b-iter.elem) then
			increment a
		else
			add a-iter.elem to Union
			increment a-iter
			increment b-iter
	return Union

This algorithm works because the sets are ordered. The iterators constantly adjust to match values between the sequences. Intersections will always be found and added to the union sequence. There are a maximum of 2n elements, or O(n). Since each iteration will increment one or two elements or add an element to the union sequence and these operations take constant time the entire algorithm is O(n).

—————————————————————————
2. Suppose we modify quicksort so that it always selects the middle element of the list as the pivot. What are best-case and worst-case inputs for this version of quicksort and how long does the algorithm run in both cases. You must justify your answer. (30 points)

The best-case is O(nlogn) when the elements are already sorted. Then the middle element will always be a perfect pivot, splitting the other elements in half. Therefore, a total of O(logn) splits must be made. With every level of division, all n elements are checked, so the algorithm takes O(nlogn) in the best case.

The worst-case is O(n^2) when most extreme elements are in the center and elements are ordered so that they approach what would be the median if the data were sorted as they get farther out. For example the quick sort steps are shown for the sequence: 56781234. (assume the pivot is chosen to be the right value if there are 2 middle values). The newly-selected pivot is shown in brackets.

0. 5678[1]234
1. 1 567[8]234
2. 1 567[2]34 8
3. 12 56[7]34 8
4. 12 56[3]4 78
5. 123 5[6]4 78
6. 123 5[4] 678
7. 1234 5 678

This sequence takes n-1 or O(n) steps to sort. Each step must examine all elements in the sequence. Therefore, the worst case is O(n)*O(n) or O(n^2).

—————————————————————————
3. Linda claims to have an algorithm that takes an input sequence S and produces an output sequence T that is a sorting of the n elements of S.

(a) Give an algorithm, isSorted(T), for testing in O(n) time if T is sorted. (10 points)

Simply iterate through the elements and check that the next element is equal or greater than the previous element; this is the definition of a sorted sequence.

Algorithm isSorted(T) {
	for (all but the last element in T)
		if (T.element > T.nextElement) then
			return false
	return true
}

The simple comparison in the loop takes O(1) time. Iterating through all elements takes O(n) time. Overall the complexity is O(n)*O(1) = O(n).

(b) Explain why the algorithm isSorted() is not sufficient to prove a particular output T of Linda's algorithm is a sorting of S. (10 points)

isSorted() only checks that the output is sorted. It does not check that the output T contains all elements in S and only elements in S. It is possible that Linda’s output does not contain all elements in the original sequence, or contains new elements, but is still sorted and isSorted() returns true.

(c) Describe what additional information Linda's algorithm could output so that her algorithm's correctness could be established on any given S and T in O(n) time. (15 points)

Assume there are no repeated elements. Linda’s algorithm could output the original sequence, the sorted sequence, and a sequence corresponding with the sorted sequence that contains links (pointers or indexes) to the original sequence. Then when each value in the sorted sequence is checked to be less than or equal to the next value, it can also be checked to be equal to the value in the original sequence indicated by the linking sequence. This extra check takes constant time, so overall the algorithm is still O(n). The algorithm would also perform an O(1) comparison to confirm that the sizes of the input and output sequences are equal. This would prove that Linda’s function is bijective - that each element in one sequence matches with exactly element in the other - and that they contain the same elements. This would prove that T is indeed the sorted S.










