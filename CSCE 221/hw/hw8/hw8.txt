Carsten Hood
CSCE 221
HW 8

—————————————————————————
1. Describe an in-place version of the quick-select algorithm in pseudo-code. Explain why your algorithm is correct and in place. (30 points)

Use a pair of algorithms in conjunction: the quickSelect algorithm uses the partition algorithm.

Algorithm partition (S, left, right, index) {
pivot =  S[index]
swap S[index] and S[right -1]
nextIndex = left
for i from left to right
    if S[ i ] <= pivot
        swap S list[i] and S[nextIndex]
        increment nextIndex
swap S[right] and S[nextIndex]
return nextIndex
}

Algorithm quickSelect(S, left, right, n)
if left = right
    return S[left]
loop									
    pivot = random index between left and right
    pivot = partition(S, left, right, pivot)
    if n = pivot
        return S[n]
    else if n < pivot
        right = pivot - 1
    else
        left = pivot + 1

The partition works because it examines every element and swaps them as appropriate; because it examines every element but otherwise performs constant operations (swapping) it take O(n) time, which is proper in a quick-select. Because it swaps elements and uses a constant number of temporary variables, it is in-place. 

The quickSelect algorithm is correct because it cuts the number of values by a fraction every time, using the partition algorithm. When n equals the pivot, or it is down to one number, it returns the value. It is in place because constant extra memory is required: using the loop, recursive depth is eliminated. Between each iteration of the loop function overhead is erased. Therefore the algorithm is in-place.

—————————————————————————
2. Show that the worst-case running time of quick-select on an n-element sequence is Omega(n2). (30 points)

In the worst-case the value searched for is an extreme and the worst pivot is chosen every time - the minimum or maximum opposite the pivot. For example perform quick select of 0 on this sequence: 012345, where the maximum element happens to be chosen as the pivot:
0. 01234[5]
1. 0123[4]
2. 012[3]
3. 01[2]
4. 0[1]
5. [0] - done
This takes 5 steps - equal to the number of elements. Each step is O(n-i), where i is the step. We have 5+4+3+2+1 = 15. If we add another element to make n=6 elements, the time would jump to 21. Therefore the worst-case scales quadratically because only a constant number of elements are removed, rather than a constant fraction of the elements.

—————————————————————————
3. Space aliens have given us a program, alienSplit(S), that can take a sequence S of n integers and partition S into sequences S1, S2, ..., Sp of size at most ceiling(n/p) each, such that the elements in Si are less than or equal to every element in S(i+1), for i=1, 2, ..., k-1, for a fixed number, p < n. (40 points)

(a) Describe the best algorithm you can for solving the selection problem using alienSplit(). Assuming that alienSplit() takes O(n) time, carefully analyze the running time of your algorithm and argue its correctness.

Use an algorithm resembling quick-select using alienSplit as the partition. First check that there is not only one element left, which would be the answer. Then split the sequence into subsequences using alienSplit. Recursively call alien split on the sequence at index [ floor(k/p) ] in sequences, as this must be the sequence that contains the kth smallest element. Update k to account for all the eliminated values by subtracting p times however many sequences were skipped (since each sequence holds p values).

//returns the kth smallest element
Algorithm alienSelect(sequence, k)
	if sequence.size == 1
		return sequence[0]\

	sequences = alienSplit(sequence)
	alienSplit(sequences[ floor(k/p) ], k-p*(floor(k/p))+1)

Dividing the elements takes O(n) via alienSplit.
This divides the problem into 1 subproblem of size ceil(n/p).
The algorithm follows the following recurrence relation:
T(n) = O(n) + p*T(ceil(n/p))
which evaluates to
O(n) + O(n/p) + O(n/p^2) + … + O(1) = O(n)
because each successive function call divides the number of remaining elements by p.

(b) Show how you could use alienSplit(S) as part of parallel algorithm for solving the selection problem. Assuming alienSplit() takes time O(1) and O(n) work, analyze the running time of your parallel algorithm and analyze the total work done by all the processors in your parallel algorithm in total (called the work of the parallel algorithm).
















