Assignment 1 Report, CSCE 314Carsten Hood, UIN: 922009787
September 22, 2015- - - - - - - - - - - - - - - - -1 Introduction



- - - - - - - - - - - - - - - - -
2 Programming Languages


1 ALGOL

ALGOL is a programming language developed to perform scientific calculations.
A committee of western scientists developed the first version in 1958, and subsequent standards were established in 1960 and 1968. Primary focuses of the language include portability and universality. (http://groups.engin.umd.umich.edu/CIS/course.des/cis400/algol/algol.html)

ALGOL was popular among researchers. It had a significant impact on the syntax of later programming languages, introducing the block structure and providing for “if” statements and iteration. The language features reserved keywords, user-defined data types, and dynamic arrays. (2 http://groups.engin.umd.umich.edu/CIS/course.des/cis400/algol/algol.html)


2 SIMULA 1967

SIMULA was developed in the 1960s by a pair of Norwegian computer scientists, Kristen Nygaard and Ole-Johan Dahl, as a means of performing computer simulations. (http://staff.um.edu.mt/jskl1/talk.html#History_I) The language is largely a descendant of ALGOL 60. (http://www.olejohandahl.info/old/birth-of-oo.pdf)

The first version of SIMULA gained popularity in Europe for performing simulations; however, it soon became apparent that an improved, more versatile version could be useful in more general programming applications. A second version of the language, SIMULA 67, launched the object-oriented programming paradigm. It introduced the terms “class” and “object”, as well as the notion of inheritance and subclassing. (http://staff.um.edu.mt/jskl1/talk.html#Basic_facts)

SIMULA 67, due to its revolutionary nature, inspired a host of other object-oriented programming languages. Both C++ and Smalltalk were directly inspired by SIMULA 67. (http://progopedia.com/language/simula-67/)


3 C 1972

In 1972 Dennis Ritchie developed the programming language called C to replace assembly language in implementing the Unix operating system. The C language was designed to retain many of the low-level capabilities of assembly language, while providing for more versatility and efficiency of implementation. (https://en.wikipedia.org/wiki/The_C_Programming_Language)

C achieved widespread use as a replacement for assembly language in various applications, including the coding of operating systems and of compilers and interpreters of higher-level languages. (https://en.wikipedia.org/wiki/C_(programming_language))

Now C is recognized as one of the most popular programming languages of all time. (http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html)


4 SQL 1974

Structured Query Language, better known as SQL, was released in 1974. (https://ccollins.wordpress.com/2007/05/20/history-of-sql/). The language was designed as a means of interacting with databases. It still the most widely used language in database systems. (http://www.sqlcourse.com/intro.html)

SQL provides basic commands for communicating with a database, and is capable of most required database interactions. It is often extended for use in specific implementations, as in Microsft SQL Server, Access, and Oracle. (http://www.sqlcourse.com/intro.html)


5 C++ 1983

Inspired by his experience with Simula 67, considered the first object-oriented programming language, Bjarne Stroustrup worked to augment the powerful and widespread C language with object-oriented features. In 1983 he released the first version of C++. Subsequent improvements to the C++ language, including a new standard in 2011, have solidified its place in the field of computing. (http://www.cplusplus.com/info/history/)

Like its predecessor C, C++ is an imperative language. Furthermore, it features classes and inheritance and is capable of generic programming. C++ also boasts a robust standard library and continued development, with another update expected in 2017. (http://www.cplusplus.com/info/history/)

Since its creation C++ has been widely used across various technologies. Due to its efficient nature, it is especially popular in resource-constrained or performance-critical systems and applications. (https://books.google.com/books?id=PSUNAAAAQBAJ&pg=PA9&lpg=PA9&dq=c%2B%2B+resource-constrained+performance+use&source=bl&ots=DqvmGfd45I&sig=RvgqMPoakz8gy7zuNAXJW0aCvKk&hl=en&sa=X&ved=0CEUQ6AEwBWoVChMI4sSkkJ75xwIVTwWSCh079gAr#v=onepage&q=c%2B%2B%20resource-constrained%20performance%20use&f=false)


6 MATLAB 1984

MATLAB was developed by MathWorks in 1984. It was designed to perform advanced numerical computations and linear algebra, and soon spread into other domains. (https://en.wikibooks.org/wiki/MATLAB_Programming)

The term MATLAB stands for matrix laboratory. It encompasses a programming language as well as an application and a special development environment for writing programs. The language is object-oriented; many consider its features to be similar to those of C++. It also allows for efficient matrix and vector calculus. (http://www.altiusdirectory.com/Computers/matlab-programming-language.php)

Today MATLAB is used by millions of scientists, researchers and engineers around the globe. (http://www.mathworks.com/products/matlab/)


7 Miranda 1985

Computer scientist David Turner developed Miranda in the mid-1980’s. His objective was to produce a simple and flexible functional programming language for commercial use. (http://groups.engin.umd.umich.edu/CIS/course.des/cis400/miranda/miranda.html#history) Miranda gained widespread use among researchers. Today it is used in the teaching of functional programming languages. (http://miranda.org.uk).

Miranda is pure, lazy, and non-strict. It also features polymorphic capabilities. Miranda heavily influenced the design of later functional languages, notably Haskell. (http://miranda.org.uk)


8 Haskell 1990

Intent on creating a standard functional programming language, a group of researchers developed Haskell in 1990. The language has since been enhanced by subsequent standardizations and community support. It has seen widespread use in teaching and researching functional languages, as well as in industry for easier, safer, and more efficient use over imperative programming languages. (https://www.fpcomplete.com/business/about/about-haskell/)

Haskell is pure, meaning its functions are similar to mathematical expressions; lazy, meaning functions do not evaluate their arguments; and statically typed, meaning the type associated with each expression is determined at compile-time. These and other features streamline the language and serve to limit errors and unnecessary code. (https://www.haskell.org)


9 Python 1991

Guido van Rossum first released Python in 1991. Python was initially intended to succeed the programming language ABC, and was designed with an emphasis on readability and efficiency of development. Today Python is widely used for various applications, such as scripting, artificial intelligence, and information security. It allows for efficient, high-level application development.  (http://www.artima.com/intv/pythonP.html)

Python is object-oriented and features dynamic semantics. It also features high-level integrated data structures. Modules, packages, and a powerful standard library allow for easy reuse and portability. (https://www.python.org/doc/essays/blurb/)


10 Java 1995

Computer scientists at Sun Microsystems developed Java with the goal of superseding C
and C++ with a cleaner, higher-level, and more efficient programming language. The first version of Java was released in 1995. Frequent improvements have come every few years since. (https://en.wikibooks.org/wiki/Java_Programming/History)

Java adheres to and even furthers the object-oriented programming paradigm. Notably, the Java language is platform-independent and programs can generally run across operating systems, giving rise to the slogan “Write once, run anywhere.” (http://heather.cs.ucdavis.edu/~matloff/Java/JavaIntro.html)

Today Java is often ranked as the most popular programming language, having surpassed both C and C++ in the TIOBE Index, which ranks programming languages by popularity. Java is especially widespread in web applications due to its portability. Google has also adopted the Java language for applications running on the Android mobile operating system. (http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html)


11 C# 2000

C# was initially developed by Microsoft to be used with the .NET platform. Its design philosophy focused on simplicity, object-oriented capabilities, and type-safety. The language was first released in 2000. C# has seen widespread use among Microsoft technologies and has become a competitive alternative to Java in many applications, including operating systems, compilers, and video games. (http://cplus.about.com/od/introductiontoprogramming/p/profileofcsh.htm)

C# is a member of the C family of programming languages, and thus is closely related to C, C++, and Java. Furthermore it supports many varied programming methodologies, including functional and generic styles. Its chief designer, Anders Hejlsberg, considers C# to most closely resemble an improvement of C++. (http://www.amazon.com/Programming-Language-Covering-Microsoft-Development/dp/0321741765 preface)


12 Scala 2003

Having contributed to the improvement of Java but inhibited by its constraints, Martin Odersky began work on a new programming language. In 2004 a public version of Scala was released. Being nearly a decade newer than Java, the Scala language incorporated modern features either lacking in or poorly assimilated into Java. (https://www.artima.com/scalazine/articles/origins_of_scala.html)

From the beginning Scala integrated functional and object-oriented capabilities. While all values are considered objects and operations are executed through calling methods, functions with a preference towards immutability can also be used. Scala features type-inference and a simple syntax. Scala was also designed to utilize Java libraries and to coexist with Java code. (http://www.scala-lang.org/what-is-scala.html)

Recently Scala has gained popularity as a modern programming language for general software development. Many large technology companies, including Twitter and Intel, use Scala for critical backend systems. (http://www.scala-lang.org/what-is-scala.html)


- - - - - - - - - - - - - - - - -
3 Language Comparison


3.1 Programming paradigm

3.1.1 Object-Oriented Languages

Most languages discussed are object-oriented, being based around instances of objects associated with defined class types. SIMULA 67 is typically regarded as having introduced the object-oriented paradigm, directly inspiring the development of C++. Python, Java, C#, and Scala are all primarily object-oriented.

3.1.2 Functional Languages

Functional languages are often contrasted with imperative languages. In functional programming, programs comprise mathematical functions and emphasize higher-level operations and immutability. In so-called pure functional languages expressions produce constant values and once created data cannot be changed. Miranda was an early pure functional language; it heavily influenced Haskell, another pure functional language widely in use today. (http://www.forbes.com/sites/quora/2014/08/08/the-best-languages-for-getting-into-functional-programming/)

3.3 Popularity (Carsten)

The popularity of programming languages can be gauged by various means. The number of projects, programs, or even lines of code estimated to be written in a certain language may be considered, as well as the number of engineers guessed to use or know the language. The TIOBE Index amasses data from twenty-five online search engines, among other factors, to determine the popularity of different programming language. (http://www.tiobe.com/index.php/content/paperinfo/tpci/programminglanguages_definition.html)

According to the TIOBE Index as determined in September of 2015, Java is the most popular programming language. Its popularity is rated at 19.6% of all languages. Java is widely use in computer education and web and application development, all markets that expanded rapidly after its inception. Java is notable for its portability and simplicity. (http://www.inc.com/larry-kim/10-most-popular-programming-languages-today.html)

The C programming language is ranked next in popularity, at 15.6%. C is still commonly used for low-level applications, such as programming operating systems and compilers, and in embedded systems. While many newer languages have focused on distancing developers from hardware, C has retained its place as a powerful low-level language. (inc.com again)

Ranked behind C and Java are C++ (6.78%), C# (4.9%), and Python (3.7%), all general-use, object-oriented programming languages common in industry. Notably, C++ has steadily declined in popularity over the past decade, presumably due to the advent of similar but more modern languages like Java. Scala, a much more recent development, has gained popularity as technology corporations adopt it for backend use, though it is still ranked only twenty-seventh. (inc.com again)

MATLAB, ranked seventeenth, maintains its powerful role in advanced mathematical calculations. Haskell (ranked 38th) is common in research and education, and also enjoys some use in industry, while its predecessor Miranda has been largely confined to academic circles in the study of functional language. Similarly, both ALGOL and SIMULA have given way to their successors in real-world application, having been enshrined in the history of computer science.

- - - - - - - - - - - - - - - - -
4 Conclusion



- - - - - - - - - - - - - - - - -
6 References

