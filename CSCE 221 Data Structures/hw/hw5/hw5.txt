Carsten Hood
CSCE 221
HW 5

—————————————————————————
1 What is the best-case, average-case, and worst-case running time for performing a find(k) operation on a map that contains n entries. Be sure to justify your answer. Please answer assuming:   (30 points)

(a) the map is implemented with a direct address table

The best case, average case, and worst case times are all O(1). A given key value is directly accessed regardless of size in a direct address table, and an element either exists at the given key or doesn’t.

(b) the map/dictionary is implemented with an unordered sequence (e.g., log file) 

The best case is O(1) when the first element examined is the desired element.
The worst case is O(n) when the desired key is the last element examined or the element does not exist; the algorithm must check each element one at a time.
The average case is O(n); the algorithm will likely have to search through some number of elements, bounded by n, before finding the correct one.

(c) the ordered map/dictionary is implemented with an ordered sequence (lookup table)

The best case is O(1) when the first element examined in the binary search (the middle element) has the desired key.
The worst case is O(logn) when the desired key is the last element examined by the binary search, or the element doesn’t exist. This case still eliminates half of the values with each check, and so is O(logn).
The average case is O(logn). A binary search runs in O(logn) and will likely find the element after a fraction of logn checks.

—————————————————————————
2 Give a pseudo-code description of an insertion into a hash table that uses quadratic probing to resolve collisions, assuming we also use the trick of replacing deleted items with a special “deactivated item'' element. (25 points)

Hash table hashtable
N = hashtable size

Algorithm insert (key, value) {
	int counter i = 0
	while (i < N)
		h[k] = ( k + i^2) % N                (compute index value)
		if (hashtable[h[k]] is empty) then
			insert key k at hashtable[h[k]]	
			stop algorithm
		else (the key space at hashtable[h[k]] is occupied)
			increment i
		if (i == N) then the hash table is full
			stop algorithm
}

Algorithm insert (k, O)
	h = h(k)
	i = 0
	while (i not equal N)
		check H[h]
		if (deactivated or empty)
			insert and return
			H[h] = (k, O)
		else
			h = h (k, n)
			i = i + 1
	throw error

h(k, i) = h_1(k) + ih_2(k)%N

—————————————————————————
3 What is the best case, average-case and worst-case time for performing n (correct) erase operations on a hash table that initially contains 2n entries, assuming we use the trick of replacing deleted items with a special ``deactivated'' element. Be sure to justify your answer. Please answer assuming the hash table is implemented using all of the cases below: (45 points) 

Assume calling remove(k) removes an arbitrary element with key = k.

(a) chaining

The best case is O(n) when all n elements we want to erase are at the front of their chains, and are the first element we access when we look up a key. Then the cost of erase is O(1), so overall n erases is O(n)
The worst case is also O(n) Even if all elements have the same key, an arbitrary element is removed (the first one). Then up to 2n elements must be examined with a single erase operation, so the cost is n O(n) operations or O(n^2)
The average case is O(n*(2n/N)) or O(n^2/N). If the elements are somewhat evenly distributed between the chains, the most elements erase must navigate is on average n/N,

(b) open addressing with linear probing

The best case is O(n) when the elements we erase are all in the position matching the calculations of the first hash function. Then each of n elements is accessed on the first attempt.
The worst case is O(1/(1-n/N))

(c) open addressing with double hashing











