Carsten Hood
CSCE 221
HW 5

—————————————————————————
1. Describe how to modify the skip list data structure to support the function median(), which returns the position of the element in the “bottom'' list S0 at index n/2. Show that your implementation of this function runs in O(logn) expected time. (35 points)

Use an indexable skip list, which stores the “width” of every link. The width of a node N is the number of nodes at level S0 that are skipped to reach N; whenever a node is added, set its width to the sum of the widths of all nodes below and to the left of it (or just to the left of it if the node is on level S0).

To find the median use this algorithm.
Algorithm node find-median(skiplist) {
	set median-index to (width of top level)/2
	set index i to 0
	set node to the top left node in the skiplist
	while (i != median-index) {
		if (i + node.right.width <= median-index) then
			node = node.right
			i = i + node.width
		else 
			node = node.down
	}
	return node
}

This search runs like a normal skiplist search, but instead of comparing key or element values, it compares the width values. It starts at the top level and moves down; whenever adding the width of the node to the right to the total width produces a value less than the width of the median, it jumps to that node and continues the search. Like the standard search it also runs in O(logn). On average the median search skips half the remaining nodes with every descent. The most steps down it must make is bounded by O(logn), and the expected number of scan-forward steps is bounded by O(logn), so: O(logn) + O(logn) = O(logn).
			
—————————————————————————
2. (a) Prove or disprove the claim that the order in which a fixed set of elements is inserted into a binary search tree does not affect the structure of the tree, i.e., that the same tree results no matter in which order the elements are inserted.

Disprove by counterexample. Adding the elements 1, 2, 3 produces tree A, show below. Adding the same elements in the order 2, 1, 3 produces tree B, show below. The trees are different so the claim is false.

Tree A		   Tree B
    1 				2
       2		     1    3	
          3

(b) What about if the tree is an AVL tree? (30 points)

Disprove by counterexample. Adding the elements 1, 2 produces tree A, show below. Adding the same elements in the order 2, 1 produces tree B, show below. Both trees are valid AVL trees and no rotation is possibly required with the addition of only 2 elements. However, the resulting trees are different (the roots are different), so the claim is false.

Tree A		   Tree B
    1 				2
       2		     1

—————————————————————————
3. Show that any n-node binary tree can be converted into any other n-node binary tree using O(n) rotations. (35 points)

It’s always possible to convert a binary tree into a chain using O(n) rotations. Repeatedly rotate the root node to the left until there is no right child of the root node. Then move down the left subtree and perform the same algorithm until all nodes are in a single chain.

	start by calling makeLeftChain(tree.root)
	
	Algorithm makeLeftChain(node)
		while (node has a right child)
			call leftRotation on node
		if (node has a left child)
			call makeLeftChain(node.left-child)
		else 
			return

This algorithm recursively moves down the left subtree and rotates the subtree’s root until there are only nodes to the left of the root. With each rotation a node is moved to the left chain and will not need to be rotated again, so a maximum of n rotations are made. A rotation takes O(1), so the algorithm takes O(n).

Then we reverse the algorithm to convert the one-chain tree into the desired tree. Since it’s shown that any binary tree can be converted into a chain, a chain can be converted into any binary tree by performing opposite operations (right rotations instead of left rotations) in reverse order. Converting the chain into the desired tree would also take O(n), because each of n nodes would similarly require at most 1 O(1) rotation.

Overall, the algorithm takes O(n) + O(n) = O(n).











