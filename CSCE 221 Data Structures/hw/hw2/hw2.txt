Carsten Hood
CSCE 221
hw 2
—————————————————————————
1
Problem R-6.9 in the text (p. 262). Rewrite the justification of Proposition 6.2 (p. 234) under the assumption that the cost of growing the array from size k to 2k is 3k cyber-dollars. How much should each push operation be charged to make the amortization work? (50 points) 

Assume that a push operation costs 1 cyber-dollar and that growing the array from size k to size 2k costs 3k cyber-dollars. Each push operation would have to cost 7 cyber- dollars. 1 would be used for the operation, the other 6 stored with the element. Doubling the size of the array requires 3k cyber-dollars. These cyber-dollars can be found at the elements stored in cells 2^(k−1) through 2^k − 1. Therefore, we have a valid amortization scheme in which each operation is charged 7 cyber-dollars. That is, we can pay for the execution of n push operations using 7n cyber-dollars.

—————————————————————————
2
Problem C-6.13 in the text (p. 265). Describe an efficient way of putting a vector representing a deck of n cards into random order. You may use a function randomInteger(n), which returns a random number between 0 and n-1, inclusive. Your method should guarantee that every possible ordering is equally likely. You should provide an argument that your function performs as required. 

Create a temporary vector to hold the shuffled deck. Run a loop with as many iterations as there are cards. In each iteration, select a random card from the group of yet unselected cards (all cards with an index beyond the iteration counter i) and add it to the temporary vector, and then swap that card with the card at index i, which has not yet been used. This avoids the O(n) run-time operation of the erase() function by replacing the selected card with an unused card and upping a counter, instead of just erasing it from the deck and requiring all elements past it to shift down. Finally, set the original vector equal to the randomized vector.

void sort(int n, Vector<card> &deck) 
{
    Vector<card> shuffled_deck;
    for (int i=0; i<n; ++i) {
        int index = i+randomInteger(n-i);
        shuffled_deck.push_back(deck[index]);
        
        card temp_card = deck[index];
        deck[index] = deck[i];		//switch used card with unused card
        deck[i] = temp_card;
    }
    deck = shuffled_deck;	// set deck equal to the new shuffled deck
}

This method guarantees that every ordering is equally likely because each randomly selected card is removed from the available (ordered) deck (by being placed behind the index of a counter), and placed in a new (shuffled) deck. Because of this, every random selection is independent of the others.

(a) Assuming that randomInteger(n) runs in O(1) time, what is the running time of your function? 

The function runs at O(n) time. It must loop through the number of cards, n, but each loop iteration’s running time is independent of the number of cards.

(b) Now, assuming that randomInteger(n) runs in O(n) time, what is the running time of your function? (50 points)

If randomInteger(n) takes O(n) time, the whole function runs in O(n^2) time. Within each of n iterations, an O(n) run-time operation is called. The result is that the overall running time is compounded.
 
 
 
 
 
 
