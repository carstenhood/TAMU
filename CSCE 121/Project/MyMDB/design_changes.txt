Chance GrayCarsten HoodConnor FearMatt HegartyChanges to Original DesignOur graphical display has the same general layout we first outlined, but with additional features. We found it practical and not significantly more difficult to display all of a movie’s information beneath its poster, rather than just the poster, title, and year, even when up to sixteen movies can be displayed at a time. We also added output boxes at the bottom of the screen to display the total number of movies resulting from a search, as well as the current page and the total number of pages. We found the addition of these display boxes to be both aesthetic and convenient for the user.

At first we did not know how we would allow the user to choose how many movies can be displayed per page. We solved this problem by allowing the user to input a number of desired rows he wants displayed in the bottom right corner of the screen. 1-4 rows can be displayed per page, which equates to 1, 2x2, 3x3 or 4x4 grids of movies. An input box takes the users desired row count, a button “update rows” applies the input, if valid, and an output box displays the current number of rows being displayed.Our graphics library does not allow for a box to be used for both input and output, so we could not show information how we had originally planned, by automatically populating the input boxes with a selected movie’s data for editing. Because of this, how we display, edit and add movie information has changed significantly. When the edit button is selected and a movie title has been entered that matches an existing movie, or when the new button is selected, all the search widgets on the screen are hidden and a new menu appears in their place that allows the user to define or redefine a movie’s information. If the user is editing an existing movie we display the movie’s information in the display area to the right, and the user enters information in whatever fields he wants to overwrite. When update is clicked, the new information is saved and stored. If the user is adding a new movie, he simply fills out the fields and clicks the create button to add the movie. When done is clicked in this add or edit mode, the buttons and text boxes are hidden and we are taken back to the buttons and text boxes used for searching. Part of the reason we made two different sets of buttons and text boxes that exchange places was to make it clear to the user which mode he is in: search or edit.Originally planning only to allow search by year, search by actor, and a general search, we have since added buttons for search by title and search by tags. These buttons were added as extra features that balance out the search functionality. Instead of  being located beneath the main search button as originally planned, these specialty search buttons sit logically next to their respective text fields. There is still a “General Search” button that searches for everything that matches any one of the fields and then displays the results.

We added scores to the information associated with a movie. While users cannot search for scores, scores can be edited and defined, and when a movie is displayed its average is score is calculated and displayed beneath it. This addition was made to showcase the functionality of the display function, which had extra room, and also, simply put, to be an addition.We added a display all button that displays every movie in the current database. This was a great way to test the display but it also allows the user to conveniently view all movie information without having to search for it.  We also added a clear display button that clears all movies being displayed. This button was added because it is a nice feature for cleaning up the display and doing so was simple given the existing code.A new struct called Movie_display was added to the program. It contains pointers to all the Text and Image objects we are displaying on the screen for single movie. This struct, we eventually realized, is necessary for keeping track of the objects that display a movie’s poster and information so that they can be removed when the search results are cleared.
In the Actor struct we combined the two strings for an actor’s first and last names into a vector of names to allow for more flexibility with the number of names an actor can have. This increases the power of our search function over using a single name string, allowing the user to search for an actor’s initials, first, middle, or last name, rather than demanding the user to type in a full name to achieve any matches. Our project is now separated into three main files, while before we had no clear plan for how we would separate our code: Data.h contains movie and actor structs along with the read and write functions, Search.h contains two functions, search() and search_by_actor(), and Main.cpp has the main() function, the Movie_display struct, and the Movie_window class and definitions, which make up the majority of the code.